# -*- coding: utf-8 -*-
# Generated by Django 1.9.4 on 2016-03-24 22:59
from __future__ import unicode_literals

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='GPS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True, unique=True)),
                ('latitude', models.FloatField(null=True)),
                ('longitude', models.FloatField(null=True)),
                ('altitude', models.FloatField(help_text='[m]', null=True)),
                ('direction', models.FloatField(help_text='Track Made Good (degrees relative to north) [°]', null=True)),
                ('speed_over_ground', models.FloatField(help_text='[km/h]', null=True)),
                ('active_satellites', models.PositiveSmallIntegerField()),
                ('quality', models.CharField(choices=[('no_fix', 'No Fix'), ('gps', 'GPS'), ('dgps', 'DGPS')], max_length=6)),
                ('hdop', models.FloatField(help_text='Horizontal Dilution Of Precision', null=True, verbose_name='HDOP')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GSInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True, unique=True)),
                ('latitude', models.FloatField()),
                ('longitude', models.FloatField()),
                ('timezone', models.IntegerField(help_text='Timezone as UTC offset in minutes (so e.g. UTC-01:45 becomes -105)')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Kundt',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True)),
                ('frequency', models.FloatField(db_index=True, help_text='[Hz]', unique=True)),
                ('amplitude', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True, unique=True)),
                ('image', models.ImageField(upload_to='')),
                ('is_panorama', models.BooleanField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PlanetaryData',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True, unique=True)),
                ('mass', models.FloatField(help_text='[kg]', null=True)),
                ('radius', models.FloatField(help_text='[km]', null=True)),
                ('escape_velocity', models.FloatField(help_text='[km/s]', null=True)),
                ('average_density', models.FloatField(help_text='[g/cm³]', null=True)),
                ('earth_similarity_index', models.FloatField(help_text='[0-1]', null=True, verbose_name='Earth Similarity Index')),
                ('avg_atm_molar_mass', models.FloatField(help_text='[g/mol]', null=True, verbose_name='Average molar mass of the atmosphere')),
                ('adiabatic_index', models.FloatField(help_text='> 1.0', null=True)),
                ('atmosphere_density', models.FloatField(help_text='[kg/m³]', null=True, verbose_name='Density of the atmosphere')),
                ('avg_molecule_mass', models.FloatField(help_text='[g]', null=True, verbose_name='Average mass of a single molecule')),
                ('specific_gas_const', models.FloatField(help_text='[J/(K*mol)]', null=True, verbose_name='Specific gas constant')),
                ('refractive_index', models.FloatField(help_text='> 1.0', null=True)),
                ('molar_refractivity', models.FloatField(help_text='[m³/mol]', null=True)),
                ('atm_speed_of_light', models.FloatField(help_text='[km/s]', null=True, verbose_name='Speed of light in the atmosphere')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True, unique=True)),
                ('phase', models.CharField(blank=True, choices=[('launch_preparation', 'Launch preparation'), ('countdown', 'Countdown'), ('launch', 'Launch'), ('descent', 'Descent'), ('ground_operations', 'Ground operations'), ('mission_complete', 'Mission complete')], max_length=18)),
                ('mission_time', models.FloatField(help_text='Current mission time in seconds. Negative value means countdown to start', null=True)),
                ('cansat_online', models.BooleanField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Telemetry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True, unique=True)),
                ('voltage', models.IntegerField()),
                ('current', models.IntegerField()),
                ('oxygen', models.IntegerField()),
                ('ion_radiation', models.IntegerField(verbose_name='Ionizing radiation')),
                ('humidity', models.FloatField(help_text='0 to 100%, resolution 0.04%')),
                ('temperature', models.FloatField(help_text='-40 to 125℃, resolution 0.01℃')),
                ('pressure', models.FloatField(help_text='Air pressure [hPa]')),
                ('gyro_x', models.FloatField(help_text='Angular velocity (X axis) [dps]')),
                ('gyro_y', models.FloatField(help_text='Angular velocity (Y axis) [dps]')),
                ('gyro_z', models.FloatField(help_text='Angular velocity (Z axis) [dps]')),
                ('accel_x', models.FloatField(help_text='Linear acceleration (X axis) [g]')),
                ('accel_y', models.FloatField(help_text='Linear acceleration (Y axis) [g]')),
                ('accel_z', models.FloatField(help_text='Linear acceleration (Z axis) [g]')),
                ('magnet_x', models.FloatField(help_text='Magnetic field (X axis) [gauss]')),
                ('magnet_y', models.FloatField(help_text='Magnetic field (Y axis) [gauss]')),
                ('magnet_z', models.FloatField(help_text='Magnetic field (Z axis) [gauss]')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
